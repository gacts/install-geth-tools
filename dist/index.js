import './sourcemap-register.cjs';if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=new URL(".",import.meta.url).pathname.slice(import.meta.url.match(/^file:\/\/\/\w:/)?1:0,-1)+"/";var t={};const e=require("@actions/core");const r=require("@actions/tool-cache");const o=require("@actions/github");const a=require("@actions/io");const s=require("@actions/cache");const n=require("@actions/exec");const i=require("@actions/glob");const c=require("path");const h=require("os");const l={version:e.getInput("version",{required:true}).replace(/^[vV]/,""),githubToken:e.getInput("github-token")};async function runAction(){let t;if(l.version.toLowerCase()==="latest"){e.debug("Requesting latest Geth version...");t=await getLatestVersion(l.githubToken);e.debug(`Latest version: ${t}`)}else{t=l.version}e.startGroup("ðŸ’¾ Install Geth");await doInstall(t);e.endGroup();e.startGroup("ðŸ§ª Installation check");await doCheck();e.endGroup()}async function doInstall(t){const o=c.join(h.tmpdir(),`geth-${t}`);const n=`geth-cache-${t}-${process.platform}-${process.arch}`;e.info(`Version to install: ${t} (target directory: ${o})`);let u=undefined;try{u=await s.restoreCache([o],n)}catch(t){e.warning(t)}if(u){e.info(`ðŸ‘Œ Geth has been restored from cache`)}else{const u=await getVersionCommitHash(l.githubToken,t);const w=getDistUrl(process.platform,process.arch,t,u);const d=c.join(h.tmpdir(),`geth.tmp`);e.debug(`Downloading Geth from ${w} to ${d}`);const g=await r.downloadTool(w);switch(true){case w.endsWith("tar.gz"):await r.extractTar(g,d);break;case w.endsWith("zip"):await r.extractZip(g,d);break;default:throw new Error("Unsupported distributive format")}await a.rmRF(g);for await(const t of(await i.create(c.join(d,"**","*"),{matchDirectories:false})).globGenerator()){await a.mv(t,c.join(o,c.basename(t)))}try{await s.saveCache([o],n)}catch(t){e.warning(t)}}e.addPath(o)}async function doCheck(){const t=await a.which("geth",true);if(t===""){throw new Error("geth binary file not found in $PATH")}await n.exec("geth",["version"],{silent:true});e.info(`Geth installed: ${t}`)}async function getLatestVersion(t){const e=o.getOctokit(t);const r=await e.rest.repos.getLatestRelease({owner:"ethereum",repo:"go-ethereum"});return r.data.tag_name.replace(/^[vV]/,"")}async function getVersionCommitHash(t,e){const r=o.getOctokit(t);const a=await r.rest.git.getRef({owner:"ethereum",repo:"go-ethereum",ref:"tags/v"+e});return a.data.object.sha}function getDistUrl(t,e,r,o){const a=o.substring(0,8);switch(t){case"linux":{switch(e){case"x64":return`https://gethstore.blob.core.windows.net/builds/geth-alltools-linux-amd64-${r}-${a}.tar.gz`;case"x32":return`https://gethstore.blob.core.windows.net/builds/geth-alltools-linux-386-${r}-${a}.tar.gz`;case"arm64":return`https://gethstore.blob.core.windows.net/builds/geth-alltools-linux-arm64-${r}-${a}.tar.gz`}throw new Error(`Unsupported linux architecture (${e})`)}case"darwin":{switch(e){case"x64":return`https://gethstore.blob.core.windows.net/builds/geth-alltools-darwin-amd64-${r}-${a}.tar.gz`;case"arm64":return`https://gethstore.blob.core.windows.net/builds/geth-alltools-darwin-arm64-${r}-${a}.tar.gz`}throw new Error(`Unsupported MacOS architecture (${e})`)}case"win32":{switch(e){case"x64":return`https://gethstore.blob.core.windows.net/builds/geth-alltools-windows-amd64-${r}-${a}.zip`;case"x32":return`https://gethstore.blob.core.windows.net/builds/geth-alltools-windows-386-${r}-${a}.zip`}throw new Error(`Unsupported windows architecture (${e})`)}}throw new Error(`Unsupported platform (${t})`)}(async()=>{await runAction()})().catch((t=>{e.setFailed(t.message)}));
//# sourceMappingURL=index.js.map